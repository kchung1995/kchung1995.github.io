<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.3.2">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2023-08-05T05:31:28+09:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">하고 싶은 것을 즐겁게</title><subtitle>Backend software engineer Kuyho Chung.</subtitle><author><name>카펀</name><email>kchung1995@gmail.com</email></author><entry><title type="html">Github Blog Migration</title><link href="http://localhost:4000/posts/github-blog-migration" rel="alternate" type="text/html" title="Github Blog Migration" /><published>2023-08-05T00:00:00+09:00</published><updated>2023-08-05T00:00:00+09:00</updated><id>http://localhost:4000/posts/github-blog-migration</id><content type="html" xml:base="http://localhost:4000/posts/github-blog-migration"><![CDATA[<h1 id="github-블로그로-이사하기">GitHub 블로그로 이사하기</h1>

<p>안녕하세요, 카펀입니다. GitHub 블로그에서는 처음 인사드립니다.</p>

<p>지금까지 <a href="https://katfun.tistory.com">티스토리 블로그</a>에서 제 개발 이야기를 글로 적었는데, 이번에 GitHub 블로그로 플랫폼을 옮기기로 결정했습니다.</p>

<p>옮기게 된 계기와 장단점, 그리고 간단한 과정을 소개하려고 합니다.</p>

<p><img src="/assets/images/posts/github-blog-migration/tistory-main.png" alt="img" /></p>

<h2 id="1-발단">1. 발단</h2>

<p>티스토리 블로그는 범용적이고 편리합니다. 네이버 블로그처럼 오래되어 보이지도 않고, 깔끔하고 커스터마이징이 가능한 좋은 플랫폼입니다. 때문에 개발자를 포함하여 많은 분들이 티스토리 블로그를 애용합니다.</p>

<p>다만 지금까지 티스토리 블로그를 개발 내용 기록용으로 약 3년 반 정도 사용하면서 (2020년부터 썼다 치고), 기술 블로그로 여러 가지 단점이 체감되기 시작했습니다.</p>

<h3 id="장점">장점</h3>

<ul>
  <li>커스터마이징이 간편함. 그러면서도 제법 개성 있게 꾸미기 가능</li>
  <li>티스토리 플랫폼에서 제공하는 강력한 통계 기능</li>
  <li>Google 검색에 비교적? 잘 잡힘</li>
</ul>

<p><a href="https://katfun.tistory.com/12">처음 기술 블로그를 시작할 때</a>는, 냅다 알고리즘만 공부한 채로 이를 어떻게든 기록에 남기고 싶었습니다. 그러다 보니 접근이 용이한 티스토리를 선택했고, 지금도 당시 최선의 선택을 했다고 생각합니다.</p>

<p>알고리즘과 책을 따라한 학습 내용을 적던 제 블로그는, 점차 단순한 정보의 나열 대신 제 오리지널 경험과 고민을 담는 성격으로 바뀌었습니다. 취업 준비를 겪고 개발자 커리어를 시작하며 나름 잔뼈가 굵어졌고(?), 점점 티스토리의 장점은 흐려지고 단점은 드러나기 시작했습니다.</p>

<h3 id="단점">단점</h3>

<ul>
  <li>코드 블럭이 못생겼고 커스터마이징이 쉽지 않음 (이거 할바엔 차라리 velog를 쓰지)</li>
  <li>마크다운 작성이 굉장히 불편함</li>
</ul>

<p>코드 블럭은 제가 티스토리에서 내내 고민하던 부분입니다. 예전이는 GitHub Gist를 사용해 보기도 하였고, 자체 코드 블럭을 사용하기도 하였습니다.</p>

<p>이것이 알고리즘 문제풀이 글을 올릴 때는 괜찮았는데 (코드 한 덩어리만 올리면 되니까), 기술 얘기를 쓰면서 점차 코드의 양이 많아지고, 코드의 가독성이 더 중요해지다 보니 문제점으로 드러나기 시작했습니다.</p>

<p><img src="/assets/images/posts/github-blog-migration/tistory-code-block.png" alt="img" style="zoom:50%;" /></p>

<p>티스토리 시절의 코드 블록입니다. 읽기 편하셨나요?</p>

<p>저는 개인적으로 코드 블럭이 너무 불호였어서, 결국 다른 방법을 모색하게 되었습니다.</p>

<p>또, 글 작성이 불편하다는 점도 한몫 했습니다. 티스토리 웹 에디터는 훌륭하지만, 코드를 편하게 작성하거나 하기에는 따르는 여러 불편함이 있습니다. 마크다운 문법으로 글을 작성하기엔 여러모로 글이 예쁘지 않고, 일반 에디터로 작성하기에는 마우스에 손이 너무 많이 갑니다.</p>

<h3 id="왜-github-블로그인가">왜 GitHub 블로그인가?</h3>

<p>블로그를 이사하기로 결정한 이후, 일말의 고민도 없이 바로 GitHub 블로그로 결정했습니다. 이유는 간단합니다.</p>

<ul>
  <li>velog는 개인의 블로그라기 보다는 하나의 플랫폼 느낌. 개인으로서는 개성을 드러내기 쉽고, 블로그 트래픽이 velog 내의 다른 블로그로 전이되어 버린다.</li>
  <li>네이버 블로그는… 할말하않</li>
  <li>WordPress는 한 11년 전에 썼던 플랫폼인데, 자유도는 GitHub 블로그에 비하면 부족하다고 판단.</li>
</ul>

<p>반면 GitHub 블로그는, 제가 느낀 갈증을 모두 해소할 수 있습니다. 커스터마이징의 자유도만큼 진입장벽이 있다는 것 외에는 불만사항이 없습니다.</p>

<p>저는 마크다운 문법을 매우 좋아합니다. 그러다 보니, 이를 그대로 글 작성에 사용하고 싶은 욕심이 있는데, 마침 GitHub 블로그는 마크다운 파일로 글을 작성하면 이를 보여 줍니다.</p>

<p>코드 블럭 역시, 예시로 하나 보여 드리겠습니다.</p>

<div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">data class</span> <span class="nc">GitHubBlog</span><span class="p">(</span>
  <span class="kd">val</span> <span class="py">title</span><span class="p">:</span> <span class="nc">String</span><span class="p">,</span>
  <span class="kd">val</span> <span class="py">owner</span><span class="p">:</span> <span class="nc">User</span><span class="p">,</span>
  <span class="kd">val</span> <span class="py">url</span><span class="p">:</span> <span class="nc">String</span><span class="p">,</span>
  <span class="kd">val</span> <span class="py">totalPosts</span><span class="p">:</span> <span class="nc">Int</span>
<span class="p">)</span> <span class="p">{</span>
  <span class="k">fun</span> <span class="nf">getUserEmail</span><span class="p">():</span> <span class="nc">String</span> <span class="p">=</span> <span class="n">owner</span><span class="p">.</span><span class="n">email</span>
  
  <span class="k">fun</span> <span class="nf">describeBlog</span><span class="p">():</span> <span class="nc">String</span> <span class="p">{</span>
    <span class="k">return</span> <span class="s">"title: $title, owner: ${User.name}, url: #url, total posts: $totalPosts."</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>읽을만 한가요? ㅎㅎ</p>

<h2 id="2-이사하기">2. 이사하기</h2>

<p>먼저 배경 지식을 끌어 모았습니다.</p>

<ul>
  <li>GitHub 블로그는 보통 jekyll의 테마를 사용한다.</li>
  <li>jekyll은 ruby를 사용한다.</li>
  <li>기본적인 설정에 필요한 요소가 있다.</li>
</ul>

<p>저는 <a href="https://jekyllthemes.io/theme/minimal-mistakes">Minimal Mistakes Jekyll theme</a>을 선택했습니다. 지금 보고 계신 테마가 바로 요 테마(dirt)입니다.</p>

<p>참고한 글:</p>

<ul>
  <li><a href="https://velog.io/@pyk0844/%EA%B9%83-%EB%B8%94%EB%A1%9C%EA%B7%B8-%EB%A7%8C%EB%93%A4%EA%B8%B0%EC%89%BD%EA%B2%8C-%EA%B4%80%EB%A6%AC-%ED%95%98%EA%B8%B0">깃 블로그 만들기(+쉽게 관리 하기)</a></li>
  <li><a href="https://supermemi.tistory.com/entry/%EB%82%98%EB%A7%8C%EC%9D%98-%EB%B8%94%EB%A1%9C%EA%B7%B8-%EB%A7%8C%EB%93%A4%EA%B8%B0-Git-hub-blog-GitHubio">1. 나만의 블로그 만들기 Git hub blog!! (github.io)</a></li>
</ul>

<p>해당 테마를 zip 형태로 받고, GitHub에 공유하여 블로그를 deploy 하였습니다. 요 과정은 검색하면 많이 나오니 설명은 생략하겠습니다.</p>

<h3 id="posts-baseurl">Posts baseUrl</h3>

<p>블로그의 여러 요소를 개인화하여 설정할 수 있습니다. <code class="language-plaintext highlighter-rouge">_config.yml</code> 파일을 열면, 다양한 설정 내용이 등장합니다.</p>

<ul>
  <li>블로그 이름, 주인 이름 등</li>
  <li>주인 소개</li>
  <li>baseUrl 설정</li>
</ul>

<p>이 중 baseUrl 설정만 간단히 소개하겠습니다. (검색해 보니 안 나와서…)</p>

<p><code class="language-plaintext highlighter-rouge">_posts</code>라는 디렉토리를 만들고, 이 안에 글을 작성하여 마크다운 형식으로 저장하게 됩니다. 형식은 ` YYYY-MM-DD-${title}.md`가 됩니다.</p>

<p>이를 그대로 적용하면, 실제 블로그의 URL은 <code class="language-plaintext highlighter-rouge">https://someone.github.io/title</code>이 됩니다. 저는 이게 마음에 안 들었습니다. url 답게, 글은 title 앞에 <code class="language-plaintext highlighter-rouge">/posts</code>를 붙이고 싶었습니다.</p>

<p>요 부분 역시 config에서 설정할 수 있습니다.</p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Defaults</span>
<span class="na">defaults</span><span class="pi">:</span>
  <span class="c1"># _posts</span>
  <span class="pi">-</span> <span class="na">scope</span><span class="pi">:</span>
      <span class="na">path</span><span class="pi">:</span> <span class="s2">"</span><span class="s">"</span>
      <span class="na">type</span><span class="pi">:</span> <span class="s">posts</span>
    <span class="na">values</span><span class="pi">:</span>
      <span class="na">permalink</span><span class="pi">:</span> <span class="s">/posts/:title</span>
      <span class="na">layout</span><span class="pi">:</span> <span class="s">single</span>
      <span class="na">author_profile</span><span class="pi">:</span> <span class="kc">true</span>
      <span class="na">read_time</span><span class="pi">:</span> <span class="kc">true</span>
      <span class="na">comments</span><span class="pi">:</span> <span class="c1"># true</span>
      <span class="na">share</span><span class="pi">:</span> <span class="c1"># true</span>
      <span class="na">related</span><span class="pi">:</span> <span class="kc">true</span>
</code></pre></div></div>

<p>기본적으로 작성되어 있는 <code class="language-plaintext highlighter-rouge">defaults.values</code> 아래에 <code class="language-plaintext highlighter-rouge">permalink</code> 값을 추가하였습니다. 따라서 posts 내의 글들은 제목 앞에 <code class="language-plaintext highlighter-rouge">/posts/</code>를 가지게 됩니다.</p>

<h3 id="markdown-글-네이밍-컨벤션">Markdown 글 네이밍 컨벤션</h3>

<p>앞에서 말씀드린 바와 같이, 글은 <code class="language-plaintext highlighter-rouge">YYYY-MM-DD-${title}.md</code> 형식의 제목을 가져야 합니다. 저는 이렇게 매번 날짜를 직접 입력해야 한다는 점이 너무 귀찮았습니다.</p>

<p>그래서 제가 시도한 방법은 아래와 같습니다.</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">_queue</code> 디렉토리를 만들고, 신규로 배포되어야 하는 글은 여기에 작성</li>
  <li>해당 글을 커밋할 때, Git Hooks를 이용해 <code class="language-plaintext highlighter-rouge">newblogpost.sh</code>를 실행</li>
  <li><code class="language-plaintext highlighter-rouge">newblogpost.sh</code> 파일은,
    <ul>
      <li><code class="language-plaintext highlighter-rouge">_queue</code> 내에 마크다운 파일이 존재하는 경우,</li>
      <li>제목을 형식에 맞도록 변경한 다음,</li>
      <li><code class="language-plaintext highlighter-rouge">_posts</code> 디렉토리로 이동</li>
    </ul>
  </li>
</ul>

<p><code class="language-plaintext highlighter-rouge">newblogpost.sh</code>는 아래와 같습니다.</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">#!/bin/bash</span>

<span class="c"># Step 1: Check if 'queue' folder exists and is not empty</span>
<span class="k">if</span> <span class="o">[</span> <span class="nt">-d</span> <span class="s2">"_queue"</span> <span class="o">]</span> <span class="o">&amp;&amp;</span> <span class="o">[</span> <span class="nt">-n</span> <span class="s2">"</span><span class="si">$(</span><span class="nb">ls</span> <span class="nt">-A</span> _queue<span class="si">)</span><span class="s2">"</span> <span class="o">]</span><span class="p">;</span> <span class="k">then</span>
  <span class="c"># Step 2: Move markdown files to 'posts' folder and rename them</span>
  <span class="k">for </span>file <span class="k">in </span>_queue/<span class="k">*</span>.md<span class="p">;</span> <span class="k">do
    if</span> <span class="o">[</span> <span class="nt">-f</span> <span class="s2">"</span><span class="nv">$file</span><span class="s2">"</span> <span class="o">]</span><span class="p">;</span> <span class="k">then
      </span><span class="nv">FILE_NAME</span><span class="o">=</span><span class="si">$(</span><span class="nb">basename</span> <span class="s2">"</span><span class="nv">$file</span><span class="s2">"</span> .md<span class="si">)</span>
      <span class="nv">NEW_FILENAME</span><span class="o">=</span><span class="si">$(</span><span class="nb">date</span> +%Y-%m-%d-<span class="s2">"</span><span class="nv">$FILE_NAME</span><span class="s2">"</span>.md<span class="si">)</span>
      <span class="nb">mv</span> <span class="s2">"</span><span class="nv">$file</span><span class="s2">"</span> <span class="s2">"_posts/</span><span class="nv">$NEW_FILENAME</span><span class="s2">"</span>
    <span class="k">fi
  done
fi</span>
</code></pre></div></div>

<p>Git Hooks 설정은 아래와 같습니다. (블로그 repository 디렉토리에서 시도해 주세요.)</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>vim .git/hooks/pre-commit

<span class="o">&gt;&gt;</span> bash newblogpost.sh

<span class="nv">$ </span><span class="nb">chmod </span>777 .git/hooks/pre-commit
</code></pre></div></div>

<p>이후 commit 하면 <code class="language-plaintext highlighter-rouge">_queue</code> 내에 작성한 파일이 <code class="language-plaintext highlighter-rouge">_posts</code>로 이동됩니다.</p>

<p>그 증거로 여러분은 지금 이 글을 보고 계십니다! ㅎㅎ</p>

<h2 id="3-결과">3. 결과</h2>

<p>그래서 짜잔! 이렇게 새 블로그에 새 글이 작성되었습니다.</p>

<p>앞으로는 이곳에서 더욱 양질의 글을 작성하도록 하겠습니다.</p>

<p>읽어 주셔서 감사합니다.</p>]]></content><author><name>카펀</name><email>kchung1995@gmail.com</email></author><category term="생각" /><category term="블로그" /><summary type="html"><![CDATA[GitHub 블로그로 이사하기]]></summary></entry></feed>